<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单链表的倒数第 k 个节点</title>
      <link href="/2023/09/03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-k-%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
      <url>/2023/09/03/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-k-%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。</p><p>例如，一个链表有 <code>6</code> 个节点，从头节点开始，它们的值依次是 <code>1、2、3、4、5、6</code>。这个链表的倒数第 <code>3</code> 个节点是值为 <code>4</code> 的节点。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k = 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure><h5 id="普通做法"><a href="#普通做法" class="headerlink" title="普通做法"></a>普通做法</h5><p>刚开始的思路是先将链表倒置，然后再根据链表倒置求出倒数第k个节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getKthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head, pre = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nex</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = nex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> pre;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; k-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">nex</span> <span class="operator">=</span> p.next;</span><br><span class="line">            p.next = ans;</span><br><span class="line">            ans = p;</span><br><span class="line">            p  = nex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法需要遍历一次链表，其实和先求链表长度一样</p><h5 id="双指针做法"><a href="#双指针做法" class="headerlink" title="双指针做法"></a>双指针做法</h5><p>该做法可以仅通过一遍遍历即可找到答案</p><p>我们设链表长度为n,需要求倒数第k个节点。</p><p>我们先让一个指针p1先走k步</p><p><img src="https://labuladong.gitee.io/algo/images/%E9%93%BE%E8%A1%A8%E6%8A%80%E5%B7%A7/1.jpeg" alt="img"></p><p>剩余的长度为 n - k</p><p>然后我们在定义一个指针p2指向链表的头结点，我们让p1和p2同时走 n - k步，这样 p2 所指的长度还剩 $n - (n - k) &#x3D;&#x3D; k$</p><p>即可求出解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getKthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(k-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            q = q.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2023/07/28/RabbitMQ/"/>
      <url>/2023/07/28/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h3 id="MQ介绍"><a href="#MQ介绍" class="headerlink" title="MQ介绍"></a>MQ介绍</h3><blockquote><p>概念：消息传输过程中保存消息的中间件。发送方称为生产者，接收方为消费者</p></blockquote><p>劣势：系统可用性降低，一致性问题</p><p>使用条件：生产者无需等待消费者获得反馈</p><p><img src="https://s3.bmp.ovh/imgs/2023/07/27/d355de15fc6ec19d.png" alt="image-20230727155943109"></p><p><strong>名词解释</strong><br><strong>Broker</strong> ：即RabbitMQ的实体服务器。提供一种传输服务，维护一条从生产者到消费者的传输线路，保证消息数据能按照指定的方式传输。<br><strong>Exchange ：</strong>消息交换机。指定消息按照什么规则路由到哪个队列Queue。<br><strong>Queue ：</strong>消息队列。消息的载体，每条消息都会被投送到一个或多个队列中。<br><strong>Binding ：</strong>绑定。作用就是将Exchange和Queue按照某种路由规则绑定起来。<br><strong>Routing Key：</strong>路由关键字。Exchange根据Routing Key进行消息投递。定义绑定时指定的关键字称为Binding Key。<br><strong>Vhost：</strong>虚拟主机。一个Broker可以有多个虚拟主机，用作不同用户的权限分离。一个虚拟主机持有一组Exchange、Queue和Binding。<br><strong>Producer：</strong>消息生产者。主要将消息投递到对应的Exchange上面。一般是独立的程序。<br><strong>Consumer：</strong>消息消费者。消息的接收者，一般是独立的程序。<br><strong>Connection：</strong>Producer 和Consumer 与Broker之间的TCP长连接。<br><strong>Channel：</strong>消息通道，也称信道。在客户端的每个连接里可以建立多个Channel，每个Channel代表一个会话任务。在RabbitMQ Java Client API中，channel上定义了大量的编程接口。</p><h3 id="RabbitMQ六种工作模式"><a href="#RabbitMQ六种工作模式" class="headerlink" title="RabbitMQ六种工作模式"></a>RabbitMQ六种工作模式</h3><h4 id="一、simple简单模式"><a href="#一、simple简单模式" class="headerlink" title="一、simple简单模式"></a>一、simple简单模式</h4><p><img src="https://s3.bmp.ovh/imgs/2023/07/27/c5380557f7a3e08f.png" alt="image-20230727113328002"></p><p>​    simple模式是一种简单的收发模式，如上图所示P代表消息生产者、红色部分为消息队列，C为消息消费者，RabbitMQ会通过默认的<code>default AMQP交换机</code>将我们的消息投递到指定的队列，它是一种Direct类型的交换机，队列与它绑定时的binding key其实就是队列的名称，简单模时下无需交换机</p><h4 id="二、work模式"><a href="#二、work模式" class="headerlink" title="二、work模式"></a>二、work模式</h4><p><img src="https://s3.bmp.ovh/imgs/2023/07/27/2cd538b47820ff99.png" alt="image-20230727113635285"></p><p>​    work模式采用的也是默认的default AMQP交换机。work模式下，多个消费者可以监听同一个队列，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理。</p><blockquote><p> work主要有两种模式：</p></blockquote><p><strong>🚗轮询分发</strong>：一个消费者消费一条，<strong>按均分配</strong>，work模式下默认是采用轮询分发方式。轮询分发就不写代码演示了，比较简单，比如生产费者发送了6条消息到队列中，如果有3个消费者同时监听着这一个队列，那么这3个消费者每人就会分得2条消息。下面主要介绍公平分发。</p><p><strong>✈公平分发</strong>：根据消费者的消费能力进行公平分发，处理得快的分得多，处理的慢的分得少，<strong>能者多劳</strong>。</p><h4 id="三、Publish-x2F-Subscribe发布订阅模式"><a href="#三、Publish-x2F-Subscribe发布订阅模式" class="headerlink" title="三、Publish&#x2F;Subscribe发布订阅模式"></a>三、Publish&#x2F;Subscribe发布订阅模式</h4><p><img src="https://s3.bmp.ovh/imgs/2023/07/27/72e9e833f3e8ed21.png" alt="image-20230727114021244"></p><p>​    在Publish&#x2F;Subscribe发布订阅模式中，生产者将消息发送到Broker中，由交换机将消息投递到与之绑定的每一个队列中，每个消费者监听自己的队列，从队列中获取生产者发送的消息。其实这就是与我们之前讲的fanout类型的交换机一样，所有与一个fanout类型的交换机绑定的队列都会接收到其投递的消息，所有队列共享消息，在这种模式下无需绑定键</p><h4 id="四、Routing路由模式"><a href="#四、Routing路由模式" class="headerlink" title="四、Routing路由模式"></a>四、Routing路由模式</h4><p><img src="https://s3.bmp.ovh/imgs/2023/07/27/c7adae49192d38ae.png" alt="image-20230727114132866"></p><p>​    路由模式下，对应使用的交换机是Direct交换机，生产者发送消息时需要指定routing key，交换机会根据routing key将消息投递到指定的队列，队列需要绑定特定的键，通过交换机所给的键给予消费者特定的消息</p><h4 id="五、Topic主题模式"><a href="#五、Topic主题模式" class="headerlink" title="五、Topic主题模式"></a>五、Topic主题模式</h4><p><img src="https://s3.bmp.ovh/imgs/2023/07/27/d6939e58724580df.png" alt="image-20230727114402039"></p><p>​    Topic主题模式采用的是Topic类型的交换机，因此是支持模糊匹配，消息能被投递到一个或多个队列中。生产者发送消息时指定routing key，Topic类型的交换机会根据routing key找到所有符合队列与交换机绑定时指定的binding key规则的队列，并将消息投递到那些队列中。如上图，当发送消息时指定routing key为<code>a.orange.b</code>(符合binding key &#x3D; <code>*.orange.*</code>的匹配规则)，则消息会被投递到Q1队列中，不会被投递到Q2队列中。</p><blockquote><p>RabbitMQ的通配符模式(Topic Exchange)的*和#区别</p></blockquote><p>   <code>#</code>匹配路由键Routing key的一个或多个词，<code>*</code>匹配路由键Routing key的一个词。<code>#</code>和<code>*</code> 都可以代表任意字符或是空，多个字符需要用 <code>.</code> 连接</p><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h4 id="一、消息的可靠投递"><a href="#一、消息的可靠投递" class="headerlink" title="一、消息的可靠投递"></a>一、消息的可靠投递</h4><h5 id="1-1消息确认机制"><a href="#1-1消息确认机制" class="headerlink" title="1.1消息确认机制"></a>1.1消息确认机制</h5><p>​       为了保证消息从队列可靠的达到消费者，RabbitMQ 提供了消息确认机制（Message Acknowledgement）。消费者在订阅队列时，可以指定 autoAck 参数，当 autoAck 参数等于 false 时，RabbitMQ 会等待消费者显式地回复确认信号后才从内存（或者磁盘）中移除消息（实际上是先打上删除标记，之后在删除）。当 autoAck 参数等于 true 时，RabbitMQ 会自动把发送出去的消息置为确认，然后从内存（或者磁盘）中删除，而不管消费者是否真正地消费到了这些消息。</p><p>​      采用消息确认机制后，只要设置 autoAck 参数为 false，消费者就有足够的时间处理消息（任务），不用担心处理消息过程中消费者进程挂掉后消息丢失的问题，因为 RabbitMQ 会一直等待持有消息直到消费者显式调用 Basic.Ack 命令为止。</p><h5 id="1-2消息发送确认"><a href="#1-2消息发送确认" class="headerlink" title="1.2消息发送确认"></a>1.2消息发送确认</h5><p>   使用RabbitMQ时，防止消息丢失或投递失败的情况，提供了两种方式来控制消息的可靠性</p><ul><li>confirm 确认模式：消息从producer 到 exchange 返回一个confirmCallback</li><li>return 退回模式： 消息从exchange到queue 投递失败返回一个returnCallback</li></ul><p>消息投递路径：</p><blockquote><p>$ producer -&gt; RabbitMQbroker -&gt; exchange -&gt; queue -&gt; consumer$</p></blockquote><h5 id="1-3消息接收确认"><a href="#1-3消息接收确认" class="headerlink" title="1.3消息接收确认"></a>1.3消息接收确认</h5><p>​     当消费者确认在监听队列的消费之处理业务失败，这时我们要手动的处理。</p><p>​        RabbitMQ 消息确认机制（ACK）默认是自动确认的，自动确认会在消息发送给消费者后立即确认，但存在丢失消息的可能，如果消费端消费逻辑抛出异常，假如你用回滚了也只是保证了数据的一致性，但是消息还是丢了，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息。</p><h4 id="二、消费端限流"><a href="#二、消费端限流" class="headerlink" title="二、消费端限流"></a>二、消费端限流</h4><h5 id="什么是消费端的限流？"><a href="#什么是消费端的限流？" class="headerlink" title="什么是消费端的限流？"></a>什么是消费端的限流？</h5><p>   场景：在订单高峰期，RabbitMQ 上已经堆积了很多消息等待消费，如果没有任何限流措施，贸然启动一个消费者时，如此多的消息瞬间推送给消费者，消费者可能因无法处理这么多的消息而承受巨大压力，甚至崩溃！</p><h5 id="开启限流"><a href="#开启限流" class="headerlink" title="开启限流"></a>开启限流</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手工确认</span></span><br><span class="line"><span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line"><span class="comment"># 消费断每次从rabbitmq中拉取n条消息</span></span><br><span class="line"><span class="attr">prefetch:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="三、TTL"><a href="#三、TTL" class="headerlink" title="三、TTL"></a>三、TTL</h4><p> 当消息获知队列超过时间时，RabbitMQ 将会自动清除过期的消息或队列</p><h4 id="四、死信队列"><a href="#四、死信队列" class="headerlink" title="四、死信队列"></a>四、死信队列</h4><p>DLX，全称为Dead-Letter-Exchange , 可以称之为死信交换机，也有人称之为死信邮箱。当消息在一个队列中变成死信(dead message)之后，它能被重新发送到另一个交换机中，这个交换机就是DLX ，绑定DLX的队列就称之为死信队列。</p><p><strong>消息变成死信，可能是由于以下的原因：</strong></p><ul><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ul><p>DLX也是一个正常的交换机，和一般的交换机没有区别，它能在任何的队列上被指定，实际上就是设置某一个队列的属性。当这个队列中存在死信时，RabbitMQ就会自动地将这个消息重新发布到设置的DLX上去，进而被路由到另一个队列，即死信队列。</p><h4 id="五、延迟队列"><a href="#五、延迟队列" class="headerlink" title="五、延迟队列"></a>五、延迟队列</h4><p>   消息进入队列后不会立即被消费，到达指定时间后，才会被消费,但是RabbitMQ并未提供该实现方法。可以通过死信队列和TTL实现延迟队列</p><p><img src="https://s3.bmp.ovh/imgs/2023/07/27/800055f50f2c6b67.png" alt="image-20230727180026128"></p><p>​    从以上可以看出，消息生产者发送消息到交换机后路由到一个指定消息过期时间的队列中，而这个队列没有消费者监听，因而在过期时间内消息不会被消费掉，当消息过期时间到后，该消息就变成了一个死信，会被重新发送到DLX死信交换机上，消息到达DLX死信交换机后就会被路由到与之绑定的队列，即被路由到死信队列，消费者监听死信队列，获取生产者生产的消息并消费。经过以上流程，我们就可以实现一个简单的延迟队列。如当设置队列中消息的过期时间<code>x-message-ttl=10000</code>（即10秒之后消息就会过期），那么在发送10秒之内我们消费者无法获取到消息，10秒之后我们才能取得消息来消费，从而实现消息的延迟消费。</p><p>​    延迟队列在我们的业务开发中经常会被使用到，例如当一个订单超过某个时间点后还没有被支付，该订单就会被自动取消，如果有绑定死信队列则可以将过期的消息重新发送到死信交换机上，由交换机将过期消息投递到死信队列中，作为历史订单消息。</p><h3 id="应用问题"><a href="#应用问题" class="headerlink" title="应用问题"></a>应用问题</h3><h4 id="一、消息可靠性保障–消息补偿"><a href="#一、消息可靠性保障–消息补偿" class="headerlink" title="一、消息可靠性保障–消息补偿"></a>一、消息可靠性保障–消息补偿</h4><p><img src="https://s3.bmp.ovh/imgs/2023/07/27/fe547d1a276c54dd.png" alt="image-20230727185338700"></p><h4 id="二、消息幂等性保障"><a href="#二、消息幂等性保障" class="headerlink" title="二、消息幂等性保障"></a>二、消息幂等性保障</h4><h6 id="什么是幂等？"><a href="#什么是幂等？" class="headerlink" title="什么是幂等？"></a>什么是幂等？</h6><blockquote><p>幂等性的实质是：对于一个资源，不管你请求一次还是请求多次，对该资源本身造成的影响应该是相同的，不能因为重复相同的请求而对该资源重复造成影响。注意关注的是请求操作对资源本身造成的影响，而不是请求资源返回的结果。<strong>其实就是保证同一条消息不会重复或者重复消费了也不会对系统数据造成异常</strong></p></blockquote><hr><p><strong>解决方法因业务而异</strong></p><ul><li><p>消费数据为了单纯的写入数据库，可以先根据主键查询数据是否已经存在，如果已经存在了就没必要插入了。或者直接插入也没问题，因为可以利用主键的唯一性来保证数据不会重复插入，重复插入只会报错，但不会出现脏数据。</p></li><li><p>消费数据只是为了缓存到redis当中，这种情况就是直接往redis中set value了，天然的幂等性。</p></li><li><p>针对复杂的业务情况，可以在生产消息的时候给每个消息加一个全局唯一ID，消费者消费消息时根据这个ID去redis当中查询之前是否消费过。如果没有消费过，就进行消费并将这个消息的ID写入到redis当中。如果已经消费过了，就无需再次消费了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL自学笔记</title>
      <link href="/2023/02/27/MySQL/"/>
      <url>/2023/02/27/MySQL/</url>
      
        <content type="html"><![CDATA[<p>MySQL登录 :<code>mysql -u用户名 -p密码 -h服务器ip地址 -P端口号</code></p><p>SQL语句不区分大小写，以分号作为间隔</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><img src="https://cdnjson.com/images/2023/02/05/Snipaste_2023-02-05_00-13-01.png"><p>个别说明:<code>DOUBLE(总长度，小数点保留位数)</code></p><p>​                <code>CHAR(最大长度)</code>、<code>VARCHAR(最大长度)</code></p><p><code>CHAR</code>存储数据都是按照最大长度存储</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><code>--  </code>单行注释或<code>#</code>(<code>MySQL</code>特有)</li><li><code>/* */</code>多行注释</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p><code>DDL</code>：操作数据库，表</p><ul><li><p>对数据库的操作</p><ul><li><strong>查看</strong><ul><li><code>SHOW DATABASES</code>：用户下的数据库</li><li><code>SELECT DATABASE()</code>：查看当前使用的数据库</li><li><code>USE 数据库名称</code>：使用数据库</li></ul></li><li><strong>增删</strong><ul><li><code>DROP DATABASE [IF [NOT]EXISTS] name</code>：删除名字为<code>name</code>的数据库，如果<code>name</code>数据库存在的话</li><li><code>CREATE DATABASE [IF [NOT] EXISTS] name</code>：不创建名字为<code>name</code>的数据库，如果<code>name</code>数据库存在的话</li></ul></li></ul></li><li><p>对表的操作</p><ul><li><p><strong>查看</strong></p><ul><li><code>SHOW TABLES</code>：查看当前数据库中的所有表</li><li><code>DESC func</code>：查看<code>func</code>表的结构信息</li></ul></li><li><p><strong>创建</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student(</span><br><span class="line">    id INT,</span><br><span class="line">    name VARCHAR(3),</span><br><span class="line">    password VARCHAR(16)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><strong>删除</strong></p><p><code>DROP TABLE 表名</code>：语法同数据库</p></li><li><p><strong>修改</strong></p><ol><li><p>修改表名<code>ALTER TABLE 表名 RENAME TO 新的表名</code></p></li><li><p>添加一列<code>ALTER TABLE 表名 ADD 列名 数据类型</code></p></li><li><p>修改数据类型<code>ALTER TABLE 表名 MODIFY 列名 新数据类型</code></p></li><li><p>修改数据类型和列名<code>ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型</code></p></li><li><p>删除列<code>ALTER TABLE 表名 DROP 列名</code></p></li></ol></li></ul></li></ul></li><li><p><code>DML</code>：对表中数据进行增删改</p><ul><li><strong>添加数据，一个新列</strong> :<code>insert into 表名(列名) values(各种数据)</code></li><li><strong>修改</strong> : <code>UPDATE 表名 SET 列名=值1,列名=值二,....[WHERE 条件]</code></li><li><strong>删除</strong>:  <code>DELETE FROM 表名 [WHERE 条件]</code></li></ul></li><li><p><code>DQL</code>：对表中数据进行查询</p><p>  基础语句：<code>SELECT 条件或列名 FROM 表名</code></p><ul><li><p>基础查询</p><ul><li><code>DISTINCT</code>：除去重复数据</li><li><code>AS</code>：在查询的时候给列起别名</li></ul></li><li><p>条件查询</p><p>在语句后加<code>WHERE 条件</code>，语句等同于其它语言</p><p><code>&lt;&gt;</code>：相当于不等号</p><p>对于<code>null</code>比较，用<code>IS</code>,<code>IS NOT</code></p></li><li><p>模糊匹配</p><p><code>LIKE</code>用于模糊匹配，<code>_</code>匹配单个任意字符，<code>%</code>匹配任意多个字符</p></li><li><p>条件查询</p><p><code>ORDER BY</code>：根据列排序，条件在前的优先级高</p><p><code>ASC</code>：升序排列，<code>DESC</code>：降序排列</p></li><li><p>分组查询</p><p><code>SELECT 字段列表 FROM 表名[WHERE 条件限定] GROUP BY 分组字段名[HAVING 分组后条件过滤]</code></p><ul><li><p>聚合函数</p><p><code>null</code>不参与任何聚合函数的计算</p><p><code>SELECT 聚合函数名(列名) FROM 表</code></p><ol><li><code>count()</code>：数量</li><li><code>max(), min()</code>：找最大最小</li><li><code>sum(), avg()</code>：和，平均值</li></ol></li></ul><p><code>HAVING</code>条件可以使用聚合函数，顺序<code>WHERE &gt; 聚合函数 &gt; HAVING</code></p></li><li><p>分页查询</p><p><code>SELECT 字段序列 FROM 表名 LIMIT 起始，查询条目数</code></p></li></ul></li></ul><p>​            多表查询时会产生笛卡儿积，需要对条件进行限制</p><ul><li><p><code>DCL</code>：对数据库进行权限控制</p><p>  限制加入表中的数据</p><table><thead><tr><th align="center">非空约束</th><th>保证数据没有NULL</th><th>NOT NULL</th></tr></thead><tbody><tr><td align="center">唯一约束</td><td>保证列中元素不同</td><td>UNIQUE</td></tr><tr><td align="center">主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td align="center">检查约束</td><td>保证列中数据满足某一条件</td><td>CHECK</td></tr><tr><td align="center">默认约束</td><td>保持数据时，未指定数据采用默认值</td><td>DEFAULT</td></tr><tr><td align="center">外键约束</td><td>外键用来让两个表中的数据建立联系</td><td>FOREIGN KEY</td></tr></tbody></table></li></ul><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>​    用于两个或者多个以上的表查询</p><ul><li><p>内连接查询</p><ul><li><p>隐式内连接</p><p><code>SELECT * FROM 表 WHERE 条件</code></p></li><li><p>显示内连接</p><p><code>SELECT * FROM 表1 [INNER] JOIN 表2 ON 条件</code></p></li></ul></li><li><p>外连接查询</p><ul><li><p>左外连接：包括左表以及交集</p><p><code>SELECT * FROM 左表 LEFT JOIN 右表 ON 条件</code></p></li><li><p>右外连接：包括右表以及交集</p></li></ul></li></ul><p>​              <code>SELECT * FROM 右表 RIGHT JOIN 左表 ON 条件</code></p><ul><li><p>内连接和外连接区别</p><ol><li>内连接，显示两个表中有联系的所有数据;</li><li>左链接，以左表为参照,显示所有数据;</li><li>右链接，以右表为参照,显示数据;</li></ol></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>用于嵌套的查询，比如找一组数据中工资大于某个员工的工资的人数，诸如此类问题</p><p><code>select name from emp where salary &gt; (select * from emp where 条件)</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法的二段性</title>
      <link href="/2023/02/24/%E4%BA%8C%E5%88%86%E7%9A%84%E4%BA%8C%E6%AE%B5%E6%80%A7/"/>
      <url>/2023/02/24/%E4%BA%8C%E5%88%86%E7%9A%84%E4%BA%8C%E6%AE%B5%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>对于一个单调的数组，取任意一个值，它的左边都是小于它，右边都是大于它，这就是二段性，在答案的两侧表现出不同的特性，因此二分可以用于个别非单调问题</p><p>例如<a href="https://www.acwing.com/problem/content/description/1462/">我在哪?</a></p><p>设定字符串答案长度为r,根据题意，字符串长度小于r的字符串必定有两个相等，大于r的字符串也不会相等，符合二分法的二段性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string a;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    unordered_set&lt;string&gt; w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i + k - <span class="number">1</span> &lt; n; i++) &#123;</span><br><span class="line">        string c = a.<span class="built_in">substr</span>(i, k);</span><br><span class="line">        <span class="keyword">if</span> (w.<span class="built_in">count</span>(c)) <span class="comment">//如果当前长度有相等的，得加长长度</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        w.<span class="built_in">insert</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>, r = n;<span class="comment">//字符串长度至少为一，所以l为1</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> k = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(k))</span><br><span class="line">            r = k;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = k + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; r;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java复习笔记（一）</title>
      <link href="/2023/01/28/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
      <url>/2023/01/28/Java%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/</url>
      
        <content type="html"><![CDATA[<h3 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h3><p> 如果在开头加上这些话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br></pre></td></tr></table></figure><p>那么写<code>lang</code>包中的<code>Math</code>、<code>System</code>包中的函数就可以不用加上包名</p><p>**<code>    instanof</code>**：检查一个对象是否属于某个特定类，也可以检查一个对象是否事项某个特定接口</p><p>对于<code>eqauls()</code>方法，<code>Java</code>要求有几大特性：</p><ol><li>自反性：对于任何非空引用<code>x</code>，<code>x.equals(x)</code>应当返回<code>true</code></li><li>对称性：对于任意非空引用<code>x</code>、<code>y</code>，<code>x.equals(y)</code>、<code>y.equals(x)</code>应当返回<code>false</code></li><li>传递性：对于任意非空引用<code>x</code>、<code>y</code>、<code>z</code>，如果<code>x.equals(y)</code>返回<code>true</code>，且<code>y.equals(z)</code>返回<code>true</code>，<code>x.equals(z)==true</code></li><li>一致性：如果<code>x</code>、<code>y</code>所调用的对象没有发生变化，反复调用<code>x.equals(y)</code>因该返回<code>true</code></li><li>对于任何非空引用<code>x</code>， <code>x.equals(null)</code>返回<code>false</code></li></ol><p>访问控制修饰符：</p><ol><li><code>public</code>：对外部完全可见</li><li><code>protected</code>：对该类所在的包以及所有的子类可见</li><li><code>default</code>：对本包可见</li><li><code>private</code>:对本类可见</li></ol><hr><p>面向对象的三大特性：封装，继承，多态</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>​    把对象的属性和操作（或服务）结合为一个独立的整体，并尽可能隐藏对象的内部实现细节。</p><ul><li>将类的某些信息隐藏在类的内部，不允许外部程序进行直接的访问调用。</li><li>通过该类提供的方法来实现对隐藏信息的操作和访问。</li><li>隐藏对象的信息。</li><li>留出访问的对外接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name, <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="built_in">this</span>.name&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;<span class="keyword">return</span> <span class="built_in">this</span>.age&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;<span class="built_in">this</span>.name = name&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;<span class="built_in">this</span>.age = age&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>​     继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。当然，如果在父类中拥有私有属性(<code>private</code>修饰)，则子类是不能被继承的。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>只支持单继承，即一个子类只允许有一个父类，但是可以实现多级继承，及子类拥有唯一的父类，而父类还可以再继承。</li><li>子类可以拥有父类的属性和方法。</li><li>子类可以拥有自己的属性和方法</li><li>子类可以重写覆盖父类的方法。</li></ul><p>成员变量和成员方法：创建的对象是谁，就优先使用谁，如果没有则直接向上找开放的变量或方法。</p><h4 id="重写-override"><a href="#重写-override" class="headerlink" title="重写(override)"></a><strong>重写(override)</strong></h4><p>​     是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong></p><ol><li>参数列表必须与被重写方法相同。</li><li>访问权限不能比父类中被重写的方法的访问权限更低（<code>public</code>&gt;<code>protected</code>&gt;(<code>default</code>)&gt;<code>private</code>）。</li><li>父类成员的方法只能被它的子类重写</li><li>被final修饰的方法和构造方法不能被重写。</li></ol><h4 id="重载-overload"><a href="#重载-overload" class="headerlink" title="重载(overload)"></a><strong>重载(overload)</strong></h4><p>​    是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><ol><li>被重载的方法必须改变参数列表（参数个数或者类型不一样）。</li><li>被重载的方法可以改变返回类型。</li><li>被重载的方法可以改变访问修饰符。</li></ol><h4 id="this，super关键字"><a href="#this，super关键字" class="headerlink" title="this，super关键字"></a>this，super关键字</h4><p><strong>super()关键字的用法</strong></p><ol><li>子类的成员方法中，访问父类的成员变量。</li><li>子类的成员方法中，访问父类的成员方法。</li><li>子类的构造方法中，访问父类的构造方法。</li></ol><p><strong>this关键字用法：</strong></p><ol><li>本类成员方法中，访问本类的成员变量。</li><li>本类成员方法中，访问本类的另一个成员方法。</li><li>本类的构造方法中，访问本类的另一个构造方法。</li></ol><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>​    多态是同一个行为具有多个不同表现形式或形态的能力。</p><p>​    在多态中，编译看左边，运行看右边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">           <span class="comment">// 多态的引用，就是向上转型,子类中的特色方法无法使用</span></span><br><span class="line">           <span class="type">Animals</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">           dog.eat();</span><br><span class="line">           </span><br><span class="line">           <span class="type">Animals</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">           cat.eat();</span><br><span class="line">           </span><br><span class="line">           <span class="comment">// 如果要调用父类中没有的方法，则要向下转型</span></span><br><span class="line">           <span class="type">Dog</span> <span class="variable">dogDown</span> <span class="operator">=</span> (Dog)dog;</span><br><span class="line">           dogDown.watchDoor();</span><br><span class="line">   </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;动物吃饭！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animals</span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;狗在吃骨头！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchDoor</span><span class="params">()</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;狗看门！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animals</span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;猫在吃鱼！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><ul><li><p>接口中的方法都是<code>public</code>，变量都是<code>public static final</code></p></li><li><p>不能通过接口的实现类对象去调用接口中的静态方法。</p></li><li><p>接口当中定义的常量：必须进行赋值。</p></li><li><p>在Java中，如果实现类的直接继承父类与实现接口发生冲突时，父类优先级高于接口。</p></li><li><p>一个类的直接父类是唯一的，但是一个类可以同时实现多个接口。</p></li><li><p>如果实现类没有覆盖重写接口中所有的抽象方法，那么实现类就必须是一个抽象类</p></li><li><p>包含一个或者多个抽象方法的类必须是抽象类</p></li><li><p>抽象类不一定有抽象方法</p></li><li><p>如果子类没有实现父类的抽象方法，子类必须是抽象类</p></li></ul><hr><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><pre><code> Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为动态（或准动态，为啥要说是准动态，因为一般而言的动态语言定义是程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言。从这个观点看，Perl，Python，Ruby是动态语言，C++，Java，C#不是动态语言。）语言的一个关键性质。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> string name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="得到Class"><a href="#得到Class" class="headerlink" title="得到Class"></a>得到Class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.通过对象调用</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> p1.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过类名调用，安全可靠，程序效率高，也说明每个对象都有一个静态成员变量class</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Person.class;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//3.通过Class对象的forName()静态方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;Person&quot;</span>);</span><br></pre></td></tr></table></figure><p>自定义的类需要排序的时候可以使用两种方法</p><ol><li><p>实现<code>Comparable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt;&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person p)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.age - p.age;</span><br><span class="line">&#125;<span class="comment">//按年龄升序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>int compareTo(T other)</code>：用这个对象与<code>other</code>比较，比较规则如下</p><p><code>static int compare(double x, double y)</code>、<code>static int compare(int x, int y)</code>：如果<code>x&lt;y</code>返回负整数，相等返回零，否则返回正整数</p><p> 实现了该接口说明这个类支持排序，调用函数的时候直接写即可</p><p>2.实现<code>Comparator</code>接口</p><p>不同于<code>Comparable</code>接口，<code>Comparator</code>可以随写随用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//还是以Person类为例</span></span><br><span class="line">Person []a = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">10</span>];</span><br><span class="line">Arrays.sort(a, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Person&gt;()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person p1, Person p2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compare(p1.age, p2.age);<span class="comment">//等同于p1.age - p2.age;</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Lamdba表达式"><a href="#Lamdba表达式" class="headerlink" title="Lamdba表达式"></a><code>Lamdba</code>表达式</h3><p><code>Lamdba</code>是一个匿名函数，它可以将一个函数作为另一个函数的参数使用，类似函数式编程，和<code>JavaScript</code>中的箭头函数写法类似，如嵌入写法<code>x =&gt; x * 2</code></p><p> 而<code>Java</code>中，以<code>Comparator</code>接口为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person []a = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">10</span>];</span><br><span class="line">Arrays.sort(a, (first, second) -&gt; first.age - second.age);</span><br></pre></td></tr></table></figure><p>使用条件：都是接口，而且接口中有且仅有一个抽象方法。</p><p><code>Lamdba</code>表达式是一种简化方式</p><hr><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><img src="https://cdnjson.com/images/2023/01/28/QQ20230128145336.png" alt="分类"></p><p><code>Collection </code>接口的接口 对象的集合（单列集合）<br>├——-<code>List</code> 接口：元素按进入先后有序保存，可重复<br>│—————- <code>LinkedList</code> 接口实现类， 链表， 插入删除， 没有同步， 线程不安全<br>│—————-<code>ArrayList</code>接口实现类， 数组， 随机访问， 没有同步， 线程不安全<br>│—————- <code>Vector </code>接口实现类 数组， 同步， 线程安全<br>│ ———————- <code>Stack</code> 是<code>Vector</code>类的实现类<br>└——-<code>Set</code> 接口： 仅接收一次，不可重复，并做内部排序<br>├—————-<code>HashSet</code> 使用哈希表（数组）存储元素<br>│————————<code>LinkedHashSet</code>链表维护元素的插入次序<br>└ —————-<code>TreeSet</code> 底层实现为二叉树，元素排好序</p><p>Map 接口 键值对的集合 （双列集合）<br>├———<code>Hashtable </code>接口实现类， 同步， 线程安全<br>├———<code>HashMap </code>接口实现类 ，没有同步， 线程不安全-<br>│—————–<code> LinkedHashMap</code> 双向链表和哈希表实现<br>├ ——–<code>TreeMap</code> 红黑树对所有的key进行排序</p><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>​    <code>HashSet</code>底层数据结构采用哈希表实现，元素无序且唯一，线程不安全，效率高，可以存储null元素，元素的唯一性是靠所存储元素类型是否重写<code>hashCode()</code>和<code>equals()</code>方法来保证的，如果没有重写这两个方法，则无法保证元素的唯一性。<br>​    具体实现唯一性的比较过程：存储元素首先会使用hash()算法函数生成一个int类型<code>hashCode</code>散列值，然后已经的所存储的元素的<code>hashCode</code>值比较，如果<code>hashCode</code>不相等，则所存储的两个对象一定不相等，此时存储当前的新的<code>hashCode</code>值处的元素对象；如果<code>hashCode</code>相等，存储元素的对象还是不一定相等，此时会调用<code>equals()</code>方法判断两个对象的内容是否相等，如果内容相等，那么就是同一个对象，无需存储；如果比较的内容不相等，那么就是不同的对象，就该存储了，此时就要采用哈希的解决地址冲突算法，在当前<code>hashCode</code>值处类似一个新的链表， 在同一个<code>hashCode</code>值的后面存储存储不同的对象，这样就保证了元素的唯一性。</p><p>​    <code>LinkedHashSet</code>底层采用链表和哈希表共同实现，线程不安全，效率高</p><p>​    <code>HashSet</code>和<code>LinkedHashSet</code>的区别在于<code>LinkedHashSet</code>保证了元素的顺序和储存顺序一致，就是按照读入的顺序排列</p><p>​    <code>TreeSet</code>采用而红黑树实现，元素唯一且已经排好序，只是除了元素需要重写<code>hashCode</code>和<code>equals</code>方法，还可以根据需要实现<code>Compareable</code>或<code>Comparator</code>接口</p><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>​    Map里保存着两组数据：<code>key</code>和<code>value</code>，它们都可以使任何引用类型的数据，但key不能重复。所以通过指定的<code>key</code>就可以取出对应的<code>value</code>。</p><p>​    由于Map中的<code>key</code>唯一，需要重写<code>equals</code>和<code>hashCode</code>方法</p><p>​    <code>HashMap</code>和<code>LinkedHashMap</code>区别类似于<code>Set</code></p><p>​    <code>TreeMap</code>非线程安全基于红黑树实现。可重写<code>Compareable</code>或<code>Comparator</code>接口</p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字符串</title>
      <link href="/2023/01/26/Java%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/01/26/Java%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="Java字符串池"><a href="#Java字符串池" class="headerlink" title="Java字符串池"></a>Java字符串池</h3><p>​        在java中有两种字符串的创建方式：1. 采用字面值方式赋值 2.采用new关键字新建字符串对象</p><h4 id="使用字面值方式赋值"><a href="#使用字面值方式赋值" class="headerlink" title="使用字面值方式赋值"></a>使用字面值方式赋值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;aaa&quot;</span>, b = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">        System.out.println(a == b);<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于java来说，<code>==</code>对于基本数据类型是比较其值，对于引用数据类型，<code>==</code>比较的是其地址</p><p>  采取字面值方式赋值时，<code>JVM</code>会去字符串池中查找是否存在<code>&quot;aaa&quot;</code>这个对象，如果不存在，那么就会新建一个字符串对象，如果存在，这不创建对象，将该对象的地址返回，覆盖字符串常量，所以上面的代码应该是<code>true</code></p><h4 id="使用new关键字新建对象"><a href="#使用new关键字新建对象" class="headerlink" title="使用new关键字新建对象"></a>使用<code>new</code>关键字新建对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;        </span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;aaa&quot;</span>, b = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;aaa&quot;</span>);        </span><br><span class="line">        System.out.println(a == b);<span class="comment">//    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​     采用<code>new</code>关键字新建一个字符串对象时，<code>JVM</code>首先在字符串池中查找有没有<code>&quot;aaa&quot;</code>这个字符串对象，如果有，则不在池中再去创建<code>&quot;aaa&quot;</code>这个对象了，直接在堆中创建一个<code>&quot;aaa&quot;</code>字符串对象，然后将堆中的这个<code>&quot;aaa&quot;</code>对象的地址返回赋给引用str3，这样，str3就指向了堆中创建的这个<code>&quot;aaa&quot;</code>字符串对象；如果没有，则首先在字符串池中创建一个<code>&quot;aaa&quot;</code>字符串对象，然后再在堆中创建一个<code>&quot;aaa&quot;</code>字符串对象，然后件堆中对象的地址返回</p><p>​    </p><p>​    因此，不论字符串池中是否存在对象，<code>new</code>关键字创建的时候都会在堆中创建一个新对象，所以上述代码的结果应该是<code>false</code></p><p><code>toString()</code>方法的时候会再在堆创建一个字符串对象</p><h4 id="intern-方法"><a href="#intern-方法" class="headerlink" title="intern()方法"></a><code>intern()</code>方法</h4><ol><li><p>使用双引号声明的字符串对象会保存在字符串常量池中。</p></li><li><p>使用 new 关键字创建的字符串对象会先从字符串常量池中找，如果没找到就创建一个，然后再在堆中创建字符串对象；如果找到了，就直接在堆中创建字符串对象。</p></li><li><p>对于没有使用双引号声明的字符串对象而言(<strong>拼接必须是常量，不能有引用</strong>),比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;aaa&quot;</span>, b = <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> a.substring(<span class="number">0</span>, <span class="number">1</span>) + <span class="string">&quot;d&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><p>​     是不会放进字符串池中的，这时就需要<code>intern()</code>方法了，该方法可以将字符串放入字符串常量池中</p><p>​    Java 7 之前，执行 <code>String.intern() </code>方法的时候，不管对象在堆中是否已经创建，字符串常量池中仍然会创建一个内容完全相同的新对象；Java 7 之后呢，由于字符串常量池放在了堆中，执行<code>String.intern()</code>方法的时候，如果对象在堆中已经创建了，字符串常量池中就不需要再创建新的对象了，而是直接保存堆中对象的引用，也就节省了一部分的内存空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;aaa&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.intern();</span><br><span class="line">System.out.println(s1 == s2);</span><br></pre></td></tr></table></figure><p> s1现在字符串池和堆中创建<code>&quot;aaa&quot;</code>和<code>&quot;bbb&quot;</code>，然后在堆中创建<code>aaabbb</code>，因此s1引用的是堆中的对象，由于Java 7以后的特性，s2引用的是堆中的地址因此为<code>true</code></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span> + <span class="string">&quot;cd&quot;</span>;</span><br><span class="line">System.out.print(str3 == str4);</span><br></pre></td></tr></table></figure><p>str4也是通过双引号声明的,所以结果应该是<code>true</code></p>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2023/01/11/JavaScript/"/>
      <url>/2023/01/11/JavaScript/</url>
      
        <content type="html"><![CDATA[<h4 id="1-引入方式"><a href="#1-引入方式" class="headerlink" title="1.引入方式"></a>1.引入方式</h4><p>1.在html代码中写入标签”<b>script</b>“即可将js代码写入其中</p><p>2.可以在标签中加入$$src&#x3D;….$$将文件整个带入其中</p><p>3.可以在标签中加入import导入js当中的变量，但是这变量需要在js文件中公开，这有助于在大型开发工程中的代码规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name;</span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/a.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">&quot;a.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> a;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>值得注意的是，我们可以在标签中加入$type&#x3D;”module”$来限制变量的作用域</p><hr><h4 id="2-变量定义"><a href="#2-变量定义" class="headerlink" title="2.变量定义"></a>2.变量定义</h4><p>​    <code>let</code>定义的是变量，<code>const</code>定义的是常量。由于JavaScript是弱类型语言，还可以通过<code>var</code>定义，如此定义的变量可以随便赋值来改变变量类型。</p><ul><li>变量类型<ul><li>整数类型 :  <code>number</code></li><li>字符串类型 ：<code>string</code></li><li>未定义串类型：<code>undefined</code></li><li>布尔类型：<code>boolean</code></li><li>空类型 ：<code>null</code></li></ul></li></ul><p>​    javascript中的string是只读的，和java中的类似。        </p><p>​    javascript中的除法是自动默认浮点数相除，不是类似C++中严格要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> / <span class="number">2</span>);<span class="comment">//输出的应该是1.5</span></span><br></pre></td></tr></table></figure><p>​    javascript中的字典定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    age;<span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line">d[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;name1&#x27;</span>;<span class="comment">//修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d[<span class="string">&#x27;name&#x27;</span>], d[<span class="string">&#x27;age&#x27;</span>]);<span class="comment">//调用变量，可以动态变化</span></span><br><span class="line"><span class="keyword">let</span> key = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d[<span class="string">&#x27;key&#x27;</span>]);<span class="comment">//此时输出的就是name的值</span></span><br><span class="line">d[<span class="string">&#x27;school&#x27;</span>] = <span class="string">&quot;p&quot;</span>;<span class="comment">//往字典里加变量</span></span><br><span class="line"><span class="keyword">delete</span> d.<span class="property">school</span>;删除school</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="property">name</span>, d.<span class="property">age</span>);<span class="comment">//调用变量</span></span><br></pre></td></tr></table></figure><h4 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h4><ul><li><code>**</code>是次方运算</li><li><code>===</code>严格判断相等</li><li><code>==</code>松散相等</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> == <span class="string">&quot;4&quot;</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span> === <span class="string">&quot;4&quot;</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>以上判断结果是不同的，松散判断不会考虑变量类型</p><h4 id="4-输入输出"><a href="#4-输入输出" class="headerlink" title="4.输入输出"></a>4.输入输出</h4><ul><li><p><code>console.log</code>控制台输出 </p></li><li><p><code>innerHTML</code>写入HTML元素</p></li><li><p><code>document.write()</code>写入HTML输出 </p></li><li><p><code>window.alert()</code>警告框输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;i&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;i&quot;</span>).<span class="property">innerHTML</span> = <span class="number">11</span>;</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="number">11</span>); </span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;document.write(11)&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>​    这样的话，<code>pre</code>标签中的内容就是<code>11</code></p><p>​    <code>document.getElementById</code>这个函数是通过HTML中的标签的ID来识别的</p><p>​    <code>document.write</code>将会覆盖HTML页面</p><h5 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h5><p><code>toFixed(n)</code>表示保留n位小数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;ppp&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>);<span class="comment">//输出name的值</span></span><br></pre></td></tr></table></figure><h4 id="5-对象"><a href="#5-对象" class="headerlink" title="5.对象"></a>5.对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x =  &#123;</span><br><span class="line">name : <span class="string">&#x27;y&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line"><span class="attr">a</span>:[<span class="number">9</span>, <span class="string">&#x27;999&#x27;</span>, <span class="literal">false</span>],</span><br><span class="line"><span class="attr">y</span>:&#123;</span><br><span class="line"><span class="attr">p</span>:<span class="number">8</span>,</span><br><span class="line"><span class="attr">u</span>:<span class="literal">true</span></span><br><span class="line">&#125;,<span class="comment">//对象套对象</span></span><br><span class="line"><span class="attr">add_</span>:<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">y</span>.<span class="property">p</span>++;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="attr">temp</span>:<span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>访问方式和字典相同</p><h4 id="6-数组"><a href="#6-数组" class="headerlink" title="6.数组"></a>6.数组</h4><h5 id="6-1定义"><a href="#6-1定义" class="headerlink" title="6.1定义"></a>6.1定义</h5><p>JavaScript中的数组元素可以随便定义，可以是数组，对象等等，没有明确规定，例如<code>a:[4, 5.6, &#39;9999&#39;, &#39;xxx&#39;]</code></p><ul><li>空数组：<code>let a = []</code></li><li>二维数组 ： <code>let a = []; let b = [a]</code></li></ul><h5 id="6-2遍历"><a href="#6-2遍历" class="headerlink" title="6.2遍历"></a>6.2遍历</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = [</span><br><span class="line">    <span class="string">&#x27;yxc&#x27;</span>,</span><br><span class="line">    <span class="number">18</span>,</span><br><span class="line">    [ <span class="number">3</span>, <span class="string">&#x27;3333&#x27;</span>, <span class="number">3.333</span> ],</span><br><span class="line">    &#123;</span><br><span class="line">        size : <span class="number">44</span>,</span><br><span class="line">        price : <span class="number">33</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b[<span class="number">1</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b[<span class="number">3</span>].<span class="property">size</span>);</span><br><span class="line">b[<span class="number">10</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ppp&quot;</span>)&#125;;<span class="comment">//通过下标修改</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    没有定义过的项为<code>undefined</code>,下标可以为负</p><p>也可以通过迭代器遍历</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">&#x27;8888&#x27;</span>, <span class="number">999</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> a) <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br></pre></td></tr></table></figure><h6 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h6><ul><li><p><code>w.push(x)</code>：向数组最后添加一个对象</p></li><li><p><code>w.pop()</code>：删除数组的最后一个对象</p></li><li><p><code>w.splice(a, b)</code>：删除从数组下标<code>a</code>开始的<code>b</code>个元素，是一段连续的区间</p></li><li><p><code>w.sort()</code>：排序函数，可以自定义比较函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>];</span><br><span class="line">a.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">n, m</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> m - n;<span class="comment">//递减排序，同其他语言</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h4><p>​    函数在JavaScript是用对象实现的</p><p>​    有三种写法</p><ol><li><code>let add = function(a, b)&#123;return a + b&#125;;</code></li><li><code>function add(a, b)&#123;return a + b&#125;;</code></li><li><code>let add = (a, b) =&gt; &#123;return a + b&#125;;</code></li></ol><h4 id="8-类"><a href="#8-类" class="headerlink" title="8.类"></a>8.类</h4> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">x, y</span>)&#123;<span class="comment">//构造函数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sum</span> = <span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span> + <span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span> = <span class="subst">$&#123;<span class="variable language_">this</span>.sum&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y, color</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(x, y);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-事件"><a href="#9-事件" class="headerlink" title="9 .事件"></a>9 .事件</h4><h5 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h5><hr><ul><li><code>click</code> ：鼠标左键单击</li><li><code>dblclick</code>：鼠标左键双击</li><li><code>contextmenu</code>：打开右键菜单，右键单击</li><li><code>mousedown</code>：鼠标按下，包括左键，右键，滚轮<ul><li><code>0</code>表示左键，<code>1</code>表示中键，<code>2</code>表示右键</li></ul></li><li><code>mouseup</code>：鼠标弹起，包括左键，右键，滚轮<ul><li><code>0</code>表示左键，<code>1</code>表示中键，<code>2</code>表示右键</li></ul></li></ul><h5 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h5><hr><ul><li><code>keydown</code>：某个键是否被按下，事件连续进行<ul><li><code>event.code</code>：返回按下的是那个键</li><li><code>event.altKey</code>、<code>event.ctrlKey</code>、<code>event.shiftKey</code>分别代表是否按下<code>alt</code>、<code>ctrl</code>、<code>shift</code></li></ul></li><li><code>keyup</code>：某个键是否被释放，事件连续进行<ul><li><code>event</code>同上</li></ul></li><li><code>keypress</code>：紧跟在<code>keydown</code>后触发，只有按下字符键时触发。</li></ul><h5 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h5><hr><ul><li><code>focus</code>：聚焦某个元素</li><li><code>blur</code>：取消聚焦某个元素</li><li><code>change</code>：某个元素内容发生改变</li></ul><p>HTML的标签中的时间如果需要被监听需要引入选择器：</p><p>​    1 .<code>document.getElementById()</code> ：通过<code>Id</code>属性来选择</p><p>​    2 .<code>document.getElementsByClassName()</code> ：通过<code>class</code>属性选择</p><p>​    3 .<code>document.getElementsByName()</code> ： 通过<code>name</code>属性选择</p><p>​    4 .<code>document.getElementsByTagName()</code>：通过元素名称选择</p><p>​    5. <code>document.querySelector()</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span> = <span class="string">&quot;1&quot;</span>, <span class="attr">class</span> = <span class="string">&quot;2&quot;</span>, <span class="attr">name</span> = <span class="string">&quot;3&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementsById</span>(<span class="string">&#x27;1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> b = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> c = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> d = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;3&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h5><hr><ul><li><code>resize</code>：窗口大小改变时触发</li><li><code>scroll</code>：页面发生滚动时触发</li><li><code>load</code>：页面加载完触发</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//参数</span></span><br><span class="line">    <span class="comment">//事件之后出发的内容</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>多个事件<code>click.1</code>、<code>click.2</code></p><h4 id="10-jQuery"><a href="#10-jQuery" class="headerlink" title="10.jQuery"></a>10.jQuery</h4><p>​    <code>jQuery</code>提供了JavaScript中的选择器，相比原生的选择器，其写法简单。<code>$(&#39;div&#39;)</code></p><p>选择器语法大致和<code>CSS</code>相同</p><p>​    事件绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$div = $(<span class="string">&#x27;#id&#x27;</span>);</span><br><span class="line">$div.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;);<span class="comment">//绑定事件</span></span><br><span class="line">$div.<span class="title function_">off</span>(<span class="string">&quot;click&quot;</span>);<span class="comment">//解绑事件</span></span><br></pre></td></tr></table></figure><ul><li><code>$(&#39; &#39;).hide(&#39; &#39;)</code>事件发生后隐藏,<b>可加参数，表示所需时间</b></li><li><code>$(&#39; &#39;).show(&#39; &#39;)</code>事件发生后展现</li><li><code>$(&#39; &#39;).fadeOut(&#39; &#39;)</code>事件发生后淡出</li><li><code>$(&#39; &#39;).fadeIn(&#39; &#39;)</code>事件发生后淡入</li></ul><hr><ul><li><p><code>$(&#39; &#39;).removedClass(&#39; &#39;)</code> 给选中的某个标签移除<code>class</code>属性</p></li><li><p><code>$(&#39; &#39;).addClass(&#39; &#39;)</code> 给选中的某个标签加上<code>class</code>属性</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客教程</title>
      <link href="/2022/02/18/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/02/18/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-下载node-js和git"><a href="#1-下载node-js和git" class="headerlink" title="1.下载node.js和git"></a>1.下载node.js和git</h3><p>关于node.js的可以看这个博文</p><p><a href="https://blog.csdn.net/chanyeolchichi/article/details/121348541">https://blog.csdn.net/chanyeolchichi/article/details/121348541</a></p><p>关于git可以看这篇博文</p><p><a href="https://blog.csdn.net/mukes/article/details/115693833">https://blog.csdn.net/mukes/article/details/115693833</a></p><p><del>不想看博主瞎说</del></p><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.0">https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.0</a></p><h4 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2.安装hexo"></a>2.安装hexo</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">hexo -v #查看 hexo 版本</span><br><span class="line">在随便一个盘中新建文件夹</span><br><span class="line">用git打开该文件夹</span><br><span class="line"></span><br><span class="line">cd 进入你的博客文件</span><br><span class="line"></span><br><span class="line">hexo init #生成博客 初始化博客</span><br></pre></td></tr></table></figure><h4 id="2-注册GitHub账号"><a href="#2-注册GitHub账号" class="headerlink" title="2.注册GitHub账号"></a>2.注册GitHub账号</h4><p>注册好后创建项目，项目名称为username+.github.io</p><p>然后在保留博客本地文件的界面打开git</p><p>cpnm install –save hexo-deployer-git</p><p>hexo clean 清理一下</p><p>hexo g 重新生成内容</p><p>hexo d 部署</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2022/02/18/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/02/18/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法，归并排序对序列的元素进行逐层折半分组，然后从最小分组开始比较排序，合并成一个大的分组，逐层进行，最终所有的元素都是有序的</p><h5 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h5><p>例如我们将4、5、8、7、2、6、3进行排序</p><p>首先我们需要划分区间，这一步骤我们用递归来实现。</p><p><img src="https://img-blog.csdnimg.cn/20200619151903848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MzQ0MTk4,size_16,color_FFFFFF,t_70" alt="图片"></p><p>再将每一个小的序列按照从小到大的顺序进行排序存入一个新的数组当中，最后再把元素赋给原数组。</p><h5 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tmp[<span class="number">1000</span>], a[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(a, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(a, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, r = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt;= a[j])tmp[k++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tmp[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) tmp[k++] = a[i++];<span class="comment">//这里防止某个区间有剩余元素</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r) tmp[k++] = a[j++];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>, j = l; j &lt;= r; i++, j++)<span class="comment">//把排好序的数赋给原数组</span></span><br><span class="line">        a[j] = tmp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
